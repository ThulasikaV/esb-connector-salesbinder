<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<proxy xmlns="http://ws.apache.org/ns/synapse" name="salesbinder" transports="https,http" statistics="disable"
       trace="disable" startOnLoad="true">
    <target>
        <inSequence>
            <property name="apiUrl" expression="json-eval($.apiUrl)"/>
            <property name="apiKey" expression="json-eval($.apiKey)"/>
            <property name="id" expression="json-eval($.id)"/>
            <property name="lastName" expression="json-eval($.lastName)"/>
            <property name="firstName" expression="json-eval($.firstName)"/>
            <property name="email1" expression="json-eval($.email1)"/>
            <property name="price" expression="json-eval($.price)"/>
            <property name="name" expression="json-eval($.name)"/>
            <property name="page" expression="json-eval($.page)"/>
            <property name="locationId" expression="json-eval($.locationId)"/>
            <property name="contextId" expression="json-eval($.contextId)"/>
            <property name="issueDate" expression="json-eval($.issueDate)"/>
            <property name="shippingAddress" expression="json-eval($.shippingAddress)"/>
            <property name="officeEmail" expression="json-eval($.officeEmail)"/>
            <property name="cost" expression="json-eval($.cost)"/>
            <property name="multiple" expression="json-eval($.multiple)"/>
            <property name="customerId" expression="json-eval($.customerId)"/>
            <property name="description" expression="json-eval($.description)"/>
            <property name="id" expression="json-eval($.id)"/>
            <property name="price" expression="json-eval($.price)"/>
            <salesbinder.init>
                <apiUrl>{$ctx:apiUrl}</apiUrl>
                <apiKey>{$ctx:apiKey}</apiKey>
            </salesbinder.init>
            <switch source="get-property('transport', 'Action')">
                <case regex="urn:getContactById">
                    <salesbinder.getContactById>
                        <id>{$ctx:id}</id>
                    </salesbinder.getContactById>
                </case>
                <case regex="urn:createContact">
                    <salesbinder.createContact>
                        <email1>{$ctx:email1}</email1>
                        <lastName>{$ctx:lastName}</lastName>
                        <firstName>{$ctx:firstName}</firstName>
                    </salesbinder.createContact>
                </case>
                <case regex="urn:getInventoryItemById">
                    <salesbinder.getInventoryItemById>
                        <id>{$ctx:id}</id>
                    </salesbinder.getInventoryItemById>
                </case>
                <case regex="urn:addInventoryItem">
                    <salesbinder.addInventoryItem>
                        <price>{$ctx:price}</price>
                        <name>{$ctx:name}</name>
                        <locationId>{$ctx:locationId}</locationId>
                        <cost>{$ctx:cost}</cost>
                        <multiple>{$ctx:multiple}</multiple>
                    </salesbinder.addInventoryItem>
                </case>
                <case regex="urn:updateInventoryItem">
                    <salesbinder.updateInventoryItem>
                        <description>{$ctx:description}</description>
                        <name>{$ctx:name}</name>
                        <locationId>{$ctx:locationId}</locationId>
                        <cost>{$ctx:cost}</cost>
                        <multiple>{$ctx:multiple}</multiple>
                        <id>{$ctx:id}</id>
                        <price>{$ctx:price}</price>
                    </salesbinder.updateInventoryItem>
                </case>
                <case regex="urn:listInventoryItems">
                    <salesbinder.listInventoryItems>
                        <locationId>{$ctx:locationId}</locationId>
                    </salesbinder.listInventoryItems>
                </case>
                <case regex="urn:getDocumentById">
                    <salesbinder.getDocumentById>
                        <id>{$ctx:id}</id>
                    </salesbinder.getDocumentById>
                </case>
                <case regex="urn:listDocuments">
                    <salesbinder.listDocuments>
                        <contextId>{$ctx:contextId}</contextId>
                        <page>{$ctx:page}</page>
                    </salesbinder.listDocuments>
                </case>
                <case regex="urn:listContacts">
                    <salesbinder.listContacts>
                        <page>{$ctx:page}</page>
                    </salesbinder.listContacts>
                </case>
                <case regex="urn:createDocument">
                    <salesbinder.createDocument>
                        <contextId>{$ctx:contextId}</contextId>
                        <issueDate>{$ctx:issueDate}</issueDate>
                        <shippingAddress>{$ctx:shippingAddress}</shippingAddress>
                        <customerId>{$ctx:customerId}</customerId>
                    </salesbinder.createDocument>
                </case>
                <case regex="urn:createAccount">
                    <salesbinder.createAccount>
                        <contextId>{$ctx:contextId}</contextId>
                        <name>{$ctx:name}</name>
                        <officeEmail>{$ctx:officeEmail}</officeEmail>
                    </salesbinder.createAccount>
                </case>
                <case regex="urn:getAccountById">
                    <salesbinder.getAccountById>
                        <id>{$ctx:id}</id>
                    </salesbinder.getAccountById>
                </case>
                <case regex="urn:listAccounts">
                    <salesbinder.listAccounts>
                        <contextId>{$ctx:contextId}</contextId>
                        <page>{$ctx:page}</page>
                    </salesbinder.listAccounts>
                </case>
            </switch>
            <respond></respond>
        </inSequence>
        <outSequence>
            <log></log>
            <send></send>
        </outSequence>
    </target>
</proxy>